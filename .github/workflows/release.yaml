name: Release

on:
  push:
    branches:
      - main
      - next

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  release-and-build:
    runs-on: ubuntu-latest
    steps:
      - name: Generate PR token
        id: generate_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.UNBKBOT_APPID }}
          private-key: ${{ secrets.UNBKBOT_KEY }}

      - name: Checkout
        uses: actions/checkout@v4

      - name: Create Release PR or Release
        id: release_please
        uses: googleapis/release-please-action@v4
        with:
          token: ${{ steps.generate_token.outputs.token }}
          target-branch: ${{ github.ref_name }}
          # Use a different config when running on 'next' so release-please will create a prerelease.
          config-file: ${{ github.ref == 'refs/heads/next' && 'release-please-config-next.json' || 'release-please-config.json' }}
          manifest-file: .release-please-manifest.json

      - name: Setup Node.js
        if: steps.release_please.outputs.release_created
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install
        if: steps.release_please.outputs.release_created
        run: npm ci

      - name: Build
        if: steps.release_please.outputs.release_created
        run: npm run build

      - name: Upload Release Artifacts
        if: steps.release_please.outputs.release_created
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: gh release upload ${{ steps.release_please.outputs.tag_name }} ./dist/*.js

      - name: Label release PR and cleanup branch
        if: steps.release_please.outputs.release_created
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          # Find the PR that was merged for this release
          PR_NUMBER=$(gh pr list --state merged --limit 50 --json number,title,mergedAt --jq '.[] | select(.title | startswith("chore(main): release")) | .number' | head -1)

          if [ -n "$PR_NUMBER" ]; then
            echo "Found release PR: #$PR_NUMBER"
            gh pr edit $PR_NUMBER --add-label "autorelease: published" || echo "Failed to add label to PR #$PR_NUMBER"

            # Get the branch name and delete it
            PR_BRANCH=$(gh pr view $PR_NUMBER --json headRefName --jq '.headRefName')
            if [ -n "$PR_BRANCH" ] && [ "$PR_BRANCH" != "main" ]; then
              echo "Deleting branch: $PR_BRANCH"
              git push origin --delete "$PR_BRANCH" || echo "Branch '$PR_BRANCH' doesn't exist or already deleted"
            fi
          else
            echo "No recent release PR found to label"
          fi
